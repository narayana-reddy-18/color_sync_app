import 'package:flutter/material.dart';
import 'dart:math';
import 'storage_service.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Auto-generated by flutterfire

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(ColorSyncApp());
}

class ColorSyncApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Color Sync App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: ColorHomePage(),
    );
  }
}

class ColorHomePage extends StatefulWidget {
  @override
  _ColorHomePageState createState() => _ColorHomePageState();
}

class _ColorHomePageState extends State<ColorHomePage> {
  List<Color> colors = [];

  @override
  void initState() {
    super.initState();
    loadSavedColors();

    // ðŸ”„ Auto-sync to Firebase when the app opens
    WidgetsBinding.instance.addPostFrameCallback((_) {;
      StorageService.syncColorsWithFirebase(); // âœ… correct

    });
  }

  void loadSavedColors() async {
    List<String> colorHexes = await StorageService.loadColors();
    setState(() {
      colors = colorHexes.map((hex) => Color(int.parse(hex, radix: 16))).toList();
    });
  }

  void generateColors() async {
    final random = Random();
    List<Color> generated = List.generate(10, (_) {
      return Color.fromARGB(
        255,
        random.nextInt(256),
        random.nextInt(256),
        random.nextInt(256),
      );
    });

    setState(() {
      colors = generated;
    });

    // Save to local storage
    await StorageService.saveColors(
      generated.map((c) => c.value.toRadixString(16)).toList(),
    );
  }

  void syncColors() async {
    await StorageService.syncColorsWithFirebase();

    // âœ… Show message after sync
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Colors synced to Firebase")),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Color Sync App'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: colors.length,
              itemBuilder: (context, index) {
                final color = colors[index];
                return Card(
                  color: color,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Text(
                      '#${color.value.toRadixString(16).toUpperCase()}',
                      style: TextStyle(
                        color: useWhiteForeground(color) ? Colors.white : Colors.black,
                        fontSize: 16,
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              ElevatedButton.icon(
                onPressed: generateColors,
                icon: Icon(Icons.refresh),
                label: Text("Generate Colors"),
              ),
              ElevatedButton.icon(
                onPressed: syncColors,
                icon: Icon(Icons.cloud_upload),
                label: Text("Sync with Firebase"),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
          const SizedBox(height: 16),
        ],
      ),
    );
  }

  bool useWhiteForeground(Color backgroundColor) {
    return backgroundColor.computeLuminance() < 0.5;
  }
}
